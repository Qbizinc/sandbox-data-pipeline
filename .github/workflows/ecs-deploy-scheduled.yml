# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS
name: Deploy to Amazon ECS
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
# "In a public repository, scheduled workflows are automatically disabled when no repository activity has occurred in 60 days."
on:
  schedule:
    - cron: '30 18 * * 1,3,5'
    - cron: '30 18 * * 2,4'
env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: belcorp
  ECS_SERVICE: nate-test-ecs-service
  ECS_CLUSTER: nate-test-ecs-cluster
  ECS_TASK_DEFINITION: docker/script/task_definition_ecs.json
  CONTAINER_NAME: Airflow
permissions:
  contents: read # This is required for actions/checkout
  id-token: write # This is required for requesting the JWT
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::907770664110:role/GIT_ACTION_ROLE_SANDBOX_DATA_PIPELINE
          role-session-name: sandbox-data-pipeline
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
